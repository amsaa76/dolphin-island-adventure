// Game Canvas Setup
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
ctx.imageSmoothingEnabled = true; // Enable smooth rendering for illustrated style

// Game State
let gameState = 'start'; // start, playing, paused, gameOver, demoExpired
let gameRunning = false;
let animationId;

// Demo Timer (3 minutes = 180 seconds)
let demoTimeRemaining = 180;
let demoTimerInterval;

// Player Stats
let playerHealth = 100;
let playerMaxHealth = 100;
let playerCoins = 0;
let playerScore = 0;
let playerLevel = 1;

// Player (Dolphin) - Placeholder for illustrated sprite
const player = {
    x: 100,
    y: canvas.height - 150, // Position on ground
    width: 100,
    height: 80,
    speed: 5,
    velocityY: 0,
    isJumping: false,
    isGrounded: true,
    direction: 'right', // 'left' or 'right'
    attacking: false,
    attackCooldown: 0,
    attackDuration: 15, // frames
    currentFrame: 0,
    frameCount: 4, // Assuming 4 frames for walking animation
    animationSpeed: 8, // frames per second
    animationTimer: 0
};

// Ground level
const groundLevel = canvas.height - 80;

// Enemies (Meme Coins) - Placeholders for illustrated sprites
let enemies = [];
const enemyTypes = [
    { name: 'PEPE', color: '#4CAF50', width: 80, height: 80, health: 60, damage: 15, speed: 2, points: 100, weapon: 'tongue' },
    { name: 'BONK', color: '#FFC107', width: 70, height: 70, health: 50, damage: 12, speed: 2.5, points: 80, weapon: 'bone' },
    { name: 'DOGE', color: '#FF9800', width: 90, height: 90, health: 70, damage: 18, speed: 1.8, points: 120, weapon: 'shiba-claw' },
    { name: 'WOJAK', color: '#B0BEC5', width: 60, height: 60, health: 40, damage: 10, speed: 3, points: 70, weapon: 'sad-tear' },
    { name: 'SHIB', color: '#E57373', width: 85, height: 85, health: 65, damage: 16, speed: 1.9, points: 110, weapon: 'katana' },
    { name: 'FLOKI', color: '#9CCC65', width: 75, height: 75, health: 55, damage: 13, speed: 2.2, points: 90, weapon: 'axe' },
    { name: 'BABYDOGE', color: '#81D4FA', width: 65, height: 65, health: 45, damage: 11, speed: 2.8, points: 75, weapon: 'pacifier' }
];

// Coins
let coinItems = [];

// Particles for effects
let particles = [];

// Keys
const keys = {
    w: false, ArrowUp: false,
    a: false, ArrowLeft: false,
    s: false, ArrowDown: false,
    d: false, ArrowRight: false,
    ' ': false // Space for attack
};

// Event Listeners
document.addEventListener('keydown', (e) => {
    const key = e.key === ' ' ? ' ' : e.key.toLowerCase();
    if (keys.hasOwnProperty(key)) {
        keys[key] = true;
        e.preventDefault();
    }
});

document.addEventListener('keyup', (e) => {
    const key = e.key === ' ' ? ' ' : e.key.toLowerCase();
    if (keys.hasOwnProperty(key)) {
        keys[key] = false;
        e.preventDefault();
    }
});

// --- UI Functions ---
function updateHUD() {
    document.getElementById('healthBar').style.width = `${playerHealth / playerMaxHealth * 100}%`;
    document.getElementById('healthText').textContent = `${playerHealth}/${playerMaxHealth}`;
    document.getElementById('level').textContent = playerLevel;
    document.getElementById('coins').textContent = playerCoins;
    document.getElementById('score').textContent = playerScore;
}

function updateDemoTimer() {
    const minutes = Math.floor(demoTimeRemaining / 60);
    const seconds = demoTimeRemaining % 60;
    document.getElementById('timeRemaining').textContent = 
        `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

function showScreen(screenId) {
    document.querySelectorAll('.screen-overlay').forEach(screen => {
        screen.style.display = 'none';
    });
    document.getElementById(screenId).style.display = 'flex';
}

// --- Game Flow Functions ---
function startGame() {
    showScreen('gameCanvas'); // Hide all overlays, canvas is visible by default
    gameState = 'playing';
    gameRunning = true;
    
    // Reset game state
    playerHealth = 100;
    playerCoins = 0;
    playerScore = 0;
    playerLevel = 1;
    enemies = [];
    coinItems = [];
    particles = [];
    player.x = 100;
    player.y = groundLevel - player.height;
    player.velocityY = 0;
    player.isJumping = false;
    player.isGrounded = true;
    player.attacking = false;
    player.attackCooldown = 0;

    // Start demo timer
    demoTimeRemaining = 180;
    updateDemoTimer();
    clearInterval(demoTimerInterval);
    demoTimerInterval = setInterval(() => {
        demoTimeRemaining--;
        updateDemoTimer();
        if (demoTimeRemaining <= 0) {
            endDemo();
        }
    }, 1000);
    
    updateHUD();
    gameLoop();
}

function restartGame() {
    startGame();
}

function endDemo() {
    gameRunning = false;
    gameState = 'demoExpired';
    clearInterval(demoTimerInterval);
    cancelAnimationFrame(animationId);
    
    document.getElementById('demoFinalScore').textContent = playerScore;
    document.getElementById('demoFinalCoins').textContent = playerCoins;
    showScreen('demoExpiredScreen');
}

function gameOver() {
    gameRunning = false;
    gameState = 'gameOver';
    clearInterval(demoTimerInterval);
    cancelAnimationFrame(animationId);
    
    document.getElementById('finalScore').textContent = playerScore;
    document.getElementById('finalCoins').textContent = playerCoins;
    showScreen('gameOverScreen');
}

function showUpgradeScreen() {
    showScreen('upgradeScreen');
}

function closeUpgradeScreen() {
    // Depending on previous state, go back to start or game over screen
    if (gameState === 'gameOver' || gameState === 'demoExpired') {
        showScreen('gameOverScreen'); // Or a specific 
